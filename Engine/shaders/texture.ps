////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;


cbuffer LightBuffer
{
	float4 lightColor;
	float3 lightDirection;
	float padding;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
	float3 normal : NORMAL;
    float2 tex : TEXCOORD0;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

	 // Calculate the amount of light on this pixel.
    lightIntensity = saturate(abs(dot(input.normal, lightDir)));

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);

	// Determine the final amount of diffuse color based on the diffuse color combined with the light intensity.
    color = saturate(lightColor * lightIntensity);

    return color * textureColor;
}
